blueprint:
  name: LORA Universal Command
  description: Handles commands from LORA via MQTT (turn_on, turn_off, set, discover, get_state)
  domain: automation
  source_url: https://github.com/dykyivladk1/lora-ha-integration/blob/main/blueprints/automation/lora/lora_universal_command.yaml
  input: {}

trigger:
  platform: mqtt
  topic: lora/control

variables:
  parts: "{{ trigger.payload.split(' ') }}"
  cmd: "{{ parts[0] if parts|length > 0 else '' }}"
  entity: "{{ parts[1] if parts|length > 1 else '' }}"
  value: "{{ parts[3] if parts|length > 3 else None }}"

action:
  - choose:
      - conditions: "{{ cmd == 'turn_on' }}"
        sequence:
          - service: homeassistant.turn_on
            target:
              entity_id: "{{ entity }}"

      - conditions: "{{ cmd == 'turn_off' }}"
        sequence:
          - service: homeassistant.turn_off
            target:
              entity_id: "{{ entity }}"

      - conditions: "{{ cmd == 'set' }}"
        sequence:
          - service: climate.set_temperature
            data:
              entity_id: "{{ entity }}"
              temperature: "{{ value | float }}"
              
      - conditions: "{{ cmd == 'discover' }}"
        sequence:
          - service: mqtt.publish
            data:
              topic: lora/status
              payload: >-
                {% for s in states %}
                  {{ s.entity_id }}:{{ s.attributes.friendly_name }}{% if not loop.last %},{% endif %}
                {% endfor %}

      - conditions: "{{ cmd == 'get_state' }}"
        sequence:
          - service: mqtt.publish
            data:
              topic: lora/status
              payload: >-
                {{
                  {
                    "entity_id": entity,
                    "state": states(entity),
                    "attributes": {
                      "temperature": state_attr(entity, 'temperature')
                    }
                  } | to_json
                }}
